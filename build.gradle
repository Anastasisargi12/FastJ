plugins {
    // it's a java library. What did you expect?
    id 'java-library'

    // For Sonarcloud code coverage testing, this is useful.
    id 'org.sonarqube' version '3.1.1'

    // For publishing to Maven Central, we'll want these.
    id 'maven-publish'
    id 'signing'
}

group('io.github.lucasstarsz.fastj')
version('1.3.0')

sourceSets {
    example {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output

        task example(type: JavaExec) {
            description('An example game using FastJ.')
            classpath = files(sourceSets.main.output, sourceSets.example.runtimeClasspath)
            main = 'io.github.lucasstarsz.fastj.example.Main'
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

sourceCompatibility = 11
targetCompatibility = 11

/* Java modules need this in order for the module path to be inferred based on module-info.java
 * files. */
plugins.withType(JavaPlugin).configureEach {
    java {
        modularity.inferModulePath = true
    }
}

javadoc {
    source(sourceSets.main.allJava)
    failOnError(false)

    options.links = [
            // resolve links to Java javadocs
            'https://docs.oracle.com/en/java/javase/11/docs/api/'
    ]
}

// Testing

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.7.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

import org.gradle.api.internal.tasks.testing.results.DefaultTestResult

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {

        def totalTestTime = 0

        afterTest { desc, DefaultTestResult result ->
            totalTestTime += result.endTime - result.startTime
        }

        afterSuite { desc, DefaultTestResult result ->
            if (!desc.parent) { // will match the outermost suite
                def passFailSkip = "$result.successfulTestCount passed, $result.failedTestCount failed, $result.skippedTestCount skipped"
                def output = "Test Suite Results: $result.resultType ($result.testCount tests, $passFailSkip) in $totalTestTime ms."
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength) + '\n')

                if (("${result.resultType}" != "SUCCESS")) {
                    System.exit(0)
                }
            }
        }
    }
}

// Code Coverage

sonarqube {
    properties {
        property "sonar.projectKey", "lucasstarsz_FastJ"
        property "sonar.organization", "lucasstarsz"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectBaseDir", "."
    }
}

// Publishing

def shouldPublish = System.getenv('ossrhUsername') != null && System.getenv('ossrhPassword') != null
publish.onlyIf { shouldPublish }

if (shouldPublish) {
    publishing {
        publications {
            fastjPublish(MavenPublication) {
                groupId = project.group
                artifactId = 'fastj-library'
                version = project.version

                pom {
                    name = 'FastJ Game Library'
                    description = 'An open source, Java-based 2D game engine.'
                    url = 'https://github.com/lucasstarsz/FastJ'

                    scm {
                        connection = 'scm:git:https://github.com/lucasstarsz/FastJ.git'
                        developerConnection = 'scm:git:https://github.com/lucasstarsz/FastJ.git'
                        url = 'https://github.com/lucasstarsz/FastJ.git'
                    }

                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/lucasstarsz/FastJ/blob/main/LICENSE.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'andrewd'
                            name = 'Andrew Dey'
                            email = 'andrewrcdey@gmail.com'
                        }
                    }
                }

                from components.java
            }
        }

        repositories {
            maven {
                url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username = System.getenv('ossrhUsername')
                    password = System.getenv('ossrhPassword')
                }
            }
        }
    }

    signing {
        sign publishing.publications.fastjPublish
    }
}
